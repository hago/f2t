import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm' version '1.8.20'
    id "org.jetbrains.dokka" version "1.8.20"
    id "jacoco"
    id "org.sonarqube" version "3.5.0.2730"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

group 'com.hagoapp'
version '0.8.6'

repositories {
    mavenCentral()
}

dependencies {
    def kotlinVersion = '1.8.20'
    def apacheCommonVersion = '1.9.0'
    def apachePoiVersion = '5.2.3'
    def parquetAvroVersion = '1.13.1'
    def hadoopVersion = '3.3.6'
    def chardetVersion = '2.4.0'
    def gsonVersion = '2.9.0'
    def reflectionsVersion = '0.10.2'
    def slf4jVersion = '1.7.30'
    def mssqlJdbcVersion = '12.2.0.jre11'
    def jupiterVersion = '5.9.2'
    def logbackVersion = '1.4.14'
    def pgJdbcVersion = '42.6.0'
    def mariaDbJdbcVersion = '3.0.10'
    def derbyJdbcVersion = '10.15.2.0'
    def sqliteJdbcVersion = '3.44.1.0'

    api "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    implementation "org.apache.commons:commons-csv:$apacheCommonVersion"
    implementation group: 'org.apache.poi', name: 'poi', version: apachePoiVersion
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: apachePoiVersion
    implementation group: 'org.apache.parquet', name: 'parquet-avro', version: parquetAvroVersion
    implementation group: 'org.apache.hadoop', name: 'hadoop-common', version: hadoopVersion
    implementation group: 'org.apache.hadoop', name: 'hadoop-mapreduce-client-core', version: hadoopVersion

    implementation "com.github.albfernandez:juniversalchardet:$chardetVersion"
    implementation group: 'com.google.code.gson', name: 'gson', version: gsonVersion
    implementation group: 'org.reflections', name: 'reflections', version: reflectionsVersion

    implementation group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion

    implementation group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: mssqlJdbcVersion

    testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiterVersion"
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion

    testImplementation group: 'org.postgresql', name: 'postgresql', version: pgJdbcVersion
    testImplementation "org.mariadb.jdbc:mariadb-java-client:$mariaDbJdbcVersion"
    testImplementation group: 'org.apache.derby', name: 'derby', version: derbyJdbcVersion
    testImplementation group: 'org.apache.derby', name: 'derbyshared', version: derbyJdbcVersion
    testImplementation group: 'org.xerial', name: 'sqlite-jdbc', version: sqliteJdbcVersion

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jupiterVersion"
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileJava {
    options.encoding = "UTF-8"
}

compileTestJava {
    options.encoding = "UTF-8"
}

javadoc {
    options.encoding = "UTF-8"
}

compileKotlin {
    compilerOptions {
        jvmTarget = JvmTarget.JVM_11
        freeCompilerArgs = ['-Xjvm-default=all-compatibility']
    }
}

compileTestKotlin {
    compilerOptions {
        jvmTarget = JvmTarget.JVM_11
    }
}

test {
    // uncomment following 2 lines for large file test
    minHeapSize = "8192M"
    maxHeapSize = "16384M"
    useJUnitPlatform()
    systemProperties = System.properties as Map<String, ?>
}
